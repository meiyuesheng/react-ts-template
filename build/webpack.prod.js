/** @format */

const webpack = require('webpack')
const merge = require('webpack-merge')
const path = require('path')
const baseConfig = require('./webpack.common')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const {CleanWebpackPlugin} = require('clean-webpack-plugin')
const {assetsPath, resolve} = require('./utils')
const TerserPlugin = require('terser-webpack-plugin')
const ScriptExtHtmlWebpackPlugin = require('script-ext-html-webpack-plugin')
const OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin')
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin
const AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin')
const DLL_PATH = '../dll'
const manifest = path.join(__dirname, `../dll/vendor.manifest.json`)

console.log('manifest----', manifest)
require('clean-webpack-plugin')
const prodConfig = {
    mode: 'production',
    devtool: 'source-map',

    plugins: [
        //Add a JavaScript or CSS asset to the HTML generated by html-webpack-plugin

        // 告诉 Webpack 使用了哪些动态链接库
        new webpack.DllReferencePlugin({
            manifest: path.join(__dirname, `../dll/vendor.manifest.json`),
        }),

        // new BundleAnalyzerPlugin(),
        new HtmlWebpackPlugin({
            filename: 'index.html',
            template: 'public/index.html',
            inject: true,
            minify: {
                removeComments: false, // 去掉注释
                collapseWhitespace: false, // 去掉多余空白
                removeAttributeQuotes: false, // 去掉一些属性的引号，例如id="moo" => id=moo
            },
        }),

        // 需放到HtmlWebpackPlugin插件后面，先生成index.html，所以插件的执行顺序是从上到下
        new AddAssetHtmlPlugin({
            filepath: resolve(`${DLL_PATH}/*.js`),
            includeSourcemap: false,
        }),
        new MiniCssExtractPlugin({
            filename: assetsPath('css/[name].[contenthash].css'),
            chunkFilename: assetsPath('css/[name].[id].[contenthash].css'),
        }),
        new CleanWebpackPlugin(),
        // new ScriptExtHtmlWebpackPlugin({
        //     //`runtime` must same as runtimeChunk name. default is `runtime`
        //     inline: /runtime.*\..*\.js$/,
        // }),
    ],

    optimization: {
        // webpack.config.js
        splitChunks: {
            chunks: 'all',
            minSize: 0,
            // cacheGroups: {
            //     default: false,
            // },
            // 默认缓存组
            cacheGroups: {
                vendors: {
                    test: /[\\/]node_modules[\\/]/,
                    priority: -10,
                },

                common: {
                    name: 'common',
                    chunks: 'all',
                    // test: resolve("src/components"), // 可自定义拓展你的规则
                    minChunks: 2,
                    priority: 5,
                    reuseExistingChunk: true,
                },
            },
        },

        // runtimeChunk: true,
        runtimeChunk: {
            name: entrypoint => `runtime-${entrypoint.name}`,
        },
        minimizer: [
            // 配置压缩器覆盖默认的压缩
            new OptimizeCssAssetsPlugin({
                cssProcessor: require('cssnano'), // 使用 cssnano 压缩器
                cssProcessorOptions: {
                    reduceIdents: false,
                    autoprefixer: false,
                    safe: true,
                    discardComments: {
                        removeAll: true,
                    },
                },
            }),
            // new TerserPlugin({
            //     cache: true,
            //     // parallel: true,
            //     terserOptions: {
            //         compress: {
            //             warnings: true,
            //             drop_console: true,
            //             drop_debugger: true,
            //             pure_funcs: ['console.log'], // 移除console
            //         },
            //     },
            //     sourceMap: true,
            // }),
        ],
    },
}

module.exports = merge(baseConfig, prodConfig)
